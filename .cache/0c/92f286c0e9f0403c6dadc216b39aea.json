{"id":"../node_modules/autoprefixer/lib/hacks/mask-border.js","dependencies":[{"name":"C:\\Users\\szb15\\will-it-miss\\package.json","includedInParent":true,"mtime":1667963388292},{"name":"C:\\Users\\szb15\\will-it-miss\\node_modules\\autoprefixer\\package.json","includedInParent":true,"mtime":1667963073346},{"name":"../declaration","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Users\\szb15\\will-it-miss\\node_modules\\autoprefixer\\lib\\hacks\\mask-border.js","resolved":"C:\\Users\\szb15\\will-it-miss\\node_modules\\autoprefixer\\lib\\declaration.js"}],"generated":{"js":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar Declaration = require('../declaration');\nvar MaskBorder = /*#__PURE__*/function (_Declaration) {\n  _inherits(MaskBorder, _Declaration);\n  var _super = _createSuper(MaskBorder);\n  function MaskBorder() {\n    _classCallCheck(this, MaskBorder);\n    return _super.apply(this, arguments);\n  }\n  _createClass(MaskBorder, [{\n    key: \"normalize\",\n    value:\n    /**\n     * Return property name by final spec\n     */\n    function normalize() {\n      return this.name.replace('box-image', 'border');\n    }\n\n    /**\n     * Return flex property for 2012 spec\n     */\n  }, {\n    key: \"prefixed\",\n    value: function prefixed(prop, prefix) {\n      var result = _get(_getPrototypeOf(MaskBorder.prototype), \"prefixed\", this).call(this, prop, prefix);\n      if (prefix === '-webkit-') {\n        result = result.replace('border', 'box-image');\n      }\n      return result;\n    }\n  }]);\n  return MaskBorder;\n}(Declaration);\nMaskBorder.names = ['mask-border', 'mask-border-source', 'mask-border-slice', 'mask-border-width', 'mask-border-outset', 'mask-border-repeat', 'mask-box-image', 'mask-box-image-source', 'mask-box-image-slice', 'mask-box-image-width', 'mask-box-image-outset', 'mask-box-image-repeat'];\nmodule.exports = MaskBorder;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":14,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":0}},{"generated":{"line":14,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":4},"name":"Declaration"},{"generated":{"line":14,"column":15},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":15}},{"generated":{"line":14,"column":18},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":18},"name":"require"},{"generated":{"line":14,"column":25},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":25}},{"generated":{"line":14,"column":26},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":26}},{"generated":{"line":14,"column":42},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":42}},{"generated":{"line":14,"column":43},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":43}},{"generated":{"line":15,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":1,"column":43}},{"generated":{"line":15,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":6},"name":"MaskBorder"},{"generated":{"line":15,"column":14},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":16,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":17,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":18,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":19,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":20,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":21,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":22,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":23,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":24,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":16}},{"generated":{"line":25,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":4,"column":2}},{"generated":{"line":26,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":5,"column":0}},{"generated":{"line":27,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":6,"column":0}},{"generated":{"line":28,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":7,"column":2}},{"generated":{"line":28,"column":25},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":7,"column":14}},{"generated":{"line":29,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":4}},{"generated":{"line":29,"column":13},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":11}},{"generated":{"line":29,"column":17},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":15}},{"generated":{"line":29,"column":18},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":16},"name":"name"},{"generated":{"line":29,"column":22},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":20}},{"generated":{"line":29,"column":23},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":21},"name":"replace"},{"generated":{"line":29,"column":30},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":28}},{"generated":{"line":29,"column":31},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":29}},{"generated":{"line":29,"column":42},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":40}},{"generated":{"line":29,"column":44},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":42}},{"generated":{"line":29,"column":52},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":50}},{"generated":{"line":29,"column":53},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":8,"column":51}},{"generated":{"line":30,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":9,"column":2}},{"generated":{"line":32,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":11,"column":2}},{"generated":{"line":33,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":12,"column":0}},{"generated":{"line":34,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":13,"column":0}},{"generated":{"line":35,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":11,"column":2}},{"generated":{"line":36,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":11,"column":2}},{"generated":{"line":37,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":11,"column":2}},{"generated":{"line":37,"column":11},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":14,"column":2}},{"generated":{"line":37,"column":29},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":14,"column":11},"name":"prop"},{"generated":{"line":37,"column":33},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":14,"column":15}},{"generated":{"line":37,"column":35},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":14,"column":17},"name":"prefix"},{"generated":{"line":37,"column":41},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":14,"column":23}},{"generated":{"line":37,"column":43},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":14,"column":25}},{"generated":{"line":38,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":4}},{"generated":{"line":38,"column":10},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":8},"name":"result"},{"generated":{"line":38,"column":16},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":14}},{"generated":{"line":38,"column":92},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":32},"name":"prop"},{"generated":{"line":38,"column":96},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":36}},{"generated":{"line":38,"column":98},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":38},"name":"prefix"},{"generated":{"line":38,"column":104},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":44}},{"generated":{"line":38,"column":105},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":15,"column":45}},{"generated":{"line":39,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":16,"column":4}},{"generated":{"line":39,"column":10},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":16,"column":8},"name":"prefix"},{"generated":{"line":39,"column":16},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":16,"column":14}},{"generated":{"line":39,"column":21},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":16,"column":19}},{"generated":{"line":39,"column":31},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":16,"column":29}},{"generated":{"line":39,"column":33},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":16,"column":31}},{"generated":{"line":40,"column":8},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":6},"name":"result"},{"generated":{"line":40,"column":14},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":12}},{"generated":{"line":40,"column":17},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":15},"name":"result"},{"generated":{"line":40,"column":23},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":21}},{"generated":{"line":40,"column":24},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":22},"name":"replace"},{"generated":{"line":40,"column":31},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":29}},{"generated":{"line":40,"column":32},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":30}},{"generated":{"line":40,"column":40},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":38}},{"generated":{"line":40,"column":42},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":40}},{"generated":{"line":40,"column":53},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":51}},{"generated":{"line":40,"column":54},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":17,"column":52}},{"generated":{"line":41,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":18,"column":4}},{"generated":{"line":42,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":19,"column":4}},{"generated":{"line":42,"column":13},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":19,"column":11},"name":"result"},{"generated":{"line":42,"column":19},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":19,"column":17}},{"generated":{"line":43,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":20,"column":2}},{"generated":{"line":44,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":20,"column":3}},{"generated":{"line":45,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":20,"column":3}},{"generated":{"line":46,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":20,"column":3}},{"generated":{"line":46,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":25},"name":"Declaration"},{"generated":{"line":46,"column":13},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":3,"column":36}},{"generated":{"line":47,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":23,"column":0},"name":"MaskBorder"},{"generated":{"line":47,"column":10},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":23,"column":10}},{"generated":{"line":47,"column":11},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":23,"column":11},"name":"names"},{"generated":{"line":47,"column":16},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":23,"column":16}},{"generated":{"line":47,"column":19},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":23,"column":19}},{"generated":{"line":47,"column":20},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":24,"column":2}},{"generated":{"line":47,"column":33},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":24,"column":15}},{"generated":{"line":47,"column":35},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":25,"column":2}},{"generated":{"line":47,"column":55},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":25,"column":22}},{"generated":{"line":47,"column":57},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":26,"column":2}},{"generated":{"line":47,"column":76},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":26,"column":21}},{"generated":{"line":47,"column":78},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":27,"column":2}},{"generated":{"line":47,"column":97},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":27,"column":21}},{"generated":{"line":47,"column":99},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":28,"column":2}},{"generated":{"line":47,"column":119},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":28,"column":22}},{"generated":{"line":47,"column":121},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":29,"column":2}},{"generated":{"line":47,"column":141},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":29,"column":22}},{"generated":{"line":47,"column":143},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":30,"column":2}},{"generated":{"line":47,"column":159},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":30,"column":18}},{"generated":{"line":47,"column":161},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":31,"column":2}},{"generated":{"line":47,"column":184},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":31,"column":25}},{"generated":{"line":47,"column":186},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":32,"column":2}},{"generated":{"line":47,"column":208},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":32,"column":24}},{"generated":{"line":47,"column":210},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":33,"column":2}},{"generated":{"line":47,"column":232},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":33,"column":24}},{"generated":{"line":47,"column":234},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":34,"column":2}},{"generated":{"line":47,"column":257},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":34,"column":25}},{"generated":{"line":47,"column":259},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":35,"column":2}},{"generated":{"line":47,"column":282},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":35,"column":25}},{"generated":{"line":47,"column":283},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":36,"column":1}},{"generated":{"line":48,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":38,"column":0},"name":"module"},{"generated":{"line":48,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":38,"column":6}},{"generated":{"line":48,"column":7},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":38,"column":7},"name":"exports"},{"generated":{"line":48,"column":14},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":38,"column":14}},{"generated":{"line":48,"column":17},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":38,"column":17},"name":"MaskBorder"},{"generated":{"line":48,"column":27},"source":"../node_modules/autoprefixer/lib/hacks/mask-border.js","original":{"line":38,"column":27}}],"sources":{"../node_modules/autoprefixer/lib/hacks/mask-border.js":"let Declaration = require('../declaration')\n\nclass MaskBorder extends Declaration {\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return this.name.replace('box-image', 'border')\n  }\n\n  /**\n   * Return flex property for 2012 spec\n   */\n  prefixed(prop, prefix) {\n    let result = super.prefixed(prop, prefix)\n    if (prefix === '-webkit-') {\n      result = result.replace('border', 'box-image')\n    }\n    return result\n  }\n}\n\nMaskBorder.names = [\n  'mask-border',\n  'mask-border-source',\n  'mask-border-slice',\n  'mask-border-width',\n  'mask-border-outset',\n  'mask-border-repeat',\n  'mask-box-image',\n  'mask-box-image-source',\n  'mask-box-image-slice',\n  'mask-box-image-width',\n  'mask-box-image-outset',\n  'mask-box-image-repeat'\n]\n\nmodule.exports = MaskBorder\n"},"lineCount":null}},"error":null,"hash":"3df8246883d43d8557165ff9202ca38f","cacheData":{"env":{}}}