{"id":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","dependencies":[{"name":"C:\\Users\\szb15\\will-it-miss\\package.json","includedInParent":true,"mtime":1667963388292},{"name":"C:\\Users\\szb15\\will-it-miss\\node_modules\\autoprefixer\\package.json","includedInParent":true,"mtime":1667963073346},{"name":"../declaration","loc":{"line":1,"column":26,"index":26},"parent":"C:\\Users\\szb15\\will-it-miss\\node_modules\\autoprefixer\\lib\\hacks\\text-decoration.js","resolved":"C:\\Users\\szb15\\will-it-miss\\node_modules\\autoprefixer\\lib\\declaration.js"}],"generated":{"js":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nvar Declaration = require('../declaration');\nvar BASIC = ['none', 'underline', 'overline', 'line-through', 'blink', 'inherit', 'initial', 'unset'];\nvar TextDecoration = /*#__PURE__*/function (_Declaration) {\n  _inherits(TextDecoration, _Declaration);\n  var _super = _createSuper(TextDecoration);\n  function TextDecoration() {\n    _classCallCheck(this, TextDecoration);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TextDecoration, [{\n    key: \"check\",\n    value:\n    /**\n     * Do not add prefixes for basic values.\n     */\n    function check(decl) {\n      return decl.value.split(/\\s+/).some(function (i) {\n        return !BASIC.includes(i);\n      });\n    }\n  }]);\n  return TextDecoration;\n}(Declaration);\nTextDecoration.names = ['text-decoration'];\nmodule.exports = TextDecoration;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":12,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":4},"name":"Declaration"},{"generated":{"line":12,"column":15},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":15}},{"generated":{"line":12,"column":18},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":18},"name":"require"},{"generated":{"line":12,"column":25},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":25}},{"generated":{"line":12,"column":26},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":26}},{"generated":{"line":12,"column":42},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":42}},{"generated":{"line":12,"column":43},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":1,"column":43}},{"generated":{"line":13,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":3,"column":6},"name":"BASIC"},{"generated":{"line":13,"column":9},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":3,"column":11}},{"generated":{"line":13,"column":12},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":3,"column":14}},{"generated":{"line":13,"column":13},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":4,"column":2}},{"generated":{"line":13,"column":19},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":4,"column":8}},{"generated":{"line":13,"column":21},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":5,"column":2}},{"generated":{"line":13,"column":32},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":5,"column":13}},{"generated":{"line":13,"column":34},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":6,"column":2}},{"generated":{"line":13,"column":44},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":6,"column":12}},{"generated":{"line":13,"column":46},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":7,"column":2}},{"generated":{"line":13,"column":60},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":7,"column":16}},{"generated":{"line":13,"column":62},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":8,"column":2}},{"generated":{"line":13,"column":69},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":8,"column":9}},{"generated":{"line":13,"column":71},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":9,"column":2}},{"generated":{"line":13,"column":80},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":9,"column":11}},{"generated":{"line":13,"column":82},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":10,"column":2}},{"generated":{"line":13,"column":91},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":10,"column":11}},{"generated":{"line":13,"column":93},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":11,"column":2}},{"generated":{"line":13,"column":100},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":11,"column":9}},{"generated":{"line":13,"column":101},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":12,"column":1}},{"generated":{"line":14,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":12,"column":1}},{"generated":{"line":14,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":6},"name":"TextDecoration"},{"generated":{"line":14,"column":18},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":15,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":16,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":17,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":18,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":19,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":20,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":21,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":22,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":23,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":20}},{"generated":{"line":24,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":15,"column":2}},{"generated":{"line":25,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":16,"column":0}},{"generated":{"line":26,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":17,"column":0}},{"generated":{"line":27,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":18,"column":2}},{"generated":{"line":27,"column":19},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":18,"column":8},"name":"decl"},{"generated":{"line":27,"column":23},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":18,"column":12}},{"generated":{"line":27,"column":25},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":18,"column":14}},{"generated":{"line":28,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":4}},{"generated":{"line":28,"column":13},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":11},"name":"decl"},{"generated":{"line":28,"column":17},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":15}},{"generated":{"line":28,"column":18},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":16},"name":"value"},{"generated":{"line":28,"column":23},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":21}},{"generated":{"line":28,"column":24},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":22},"name":"split"},{"generated":{"line":28,"column":29},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":27}},{"generated":{"line":28,"column":30},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":28}},{"generated":{"line":28,"column":35},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":33}},{"generated":{"line":28,"column":36},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":34}},{"generated":{"line":28,"column":37},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":35},"name":"some"},{"generated":{"line":28,"column":41},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":39}},{"generated":{"line":28,"column":42},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":40}},{"generated":{"line":28,"column":52},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":40},"name":"i"},{"generated":{"line":28,"column":53},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":41}},{"generated":{"line":29,"column":8},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":41}},{"generated":{"line":29,"column":15},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":45}},{"generated":{"line":29,"column":16},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":46},"name":"BASIC"},{"generated":{"line":29,"column":21},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":51}},{"generated":{"line":29,"column":22},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":52},"name":"includes"},{"generated":{"line":29,"column":30},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":60}},{"generated":{"line":29,"column":31},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":61},"name":"i"},{"generated":{"line":29,"column":32},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":62}},{"generated":{"line":29,"column":33},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":63}},{"generated":{"line":30,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":63}},{"generated":{"line":30,"column":8},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":19,"column":64}},{"generated":{"line":31,"column":4},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":20,"column":2}},{"generated":{"line":32,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":20,"column":3}},{"generated":{"line":33,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":20,"column":3}},{"generated":{"line":34,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":20,"column":3}},{"generated":{"line":34,"column":2},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":29},"name":"Declaration"},{"generated":{"line":34,"column":13},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":14,"column":40}},{"generated":{"line":35,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":0},"name":"TextDecoration"},{"generated":{"line":35,"column":14},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":14}},{"generated":{"line":35,"column":15},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":15},"name":"names"},{"generated":{"line":35,"column":20},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":20}},{"generated":{"line":35,"column":23},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":23}},{"generated":{"line":35,"column":24},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":24}},{"generated":{"line":35,"column":41},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":41}},{"generated":{"line":35,"column":42},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":23,"column":42}},{"generated":{"line":36,"column":0},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":25,"column":0},"name":"module"},{"generated":{"line":36,"column":6},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":25,"column":6}},{"generated":{"line":36,"column":7},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":25,"column":7},"name":"exports"},{"generated":{"line":36,"column":14},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":25,"column":14}},{"generated":{"line":36,"column":17},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":25,"column":17},"name":"TextDecoration"},{"generated":{"line":36,"column":31},"source":"../node_modules/autoprefixer/lib/hacks/text-decoration.js","original":{"line":25,"column":31}}],"sources":{"../node_modules/autoprefixer/lib/hacks/text-decoration.js":"let Declaration = require('../declaration')\n\nconst BASIC = [\n  'none',\n  'underline',\n  'overline',\n  'line-through',\n  'blink',\n  'inherit',\n  'initial',\n  'unset'\n]\n\nclass TextDecoration extends Declaration {\n  /**\n   * Do not add prefixes for basic values.\n   */\n  check(decl) {\n    return decl.value.split(/\\s+/).some(i => !BASIC.includes(i))\n  }\n}\n\nTextDecoration.names = ['text-decoration']\n\nmodule.exports = TextDecoration\n"},"lineCount":null}},"error":null,"hash":"2cba9c7de2eaa86b894a1b2f5a6345c4","cacheData":{"env":{}}}